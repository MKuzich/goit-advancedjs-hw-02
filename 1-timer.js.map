{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst inputDate = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('button[data-start]');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\nlet selectedDate = null;\nlet timerId = null;\n\nstartBtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    selectedDate = selectedDates[0];\n    if (selectedDate && selectedDate > new Date()) {\n      startBtn.disabled = false;\n    } else {\n      startBtn.disabled = true;\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future!',\n      });\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconst addLeadingZero = val => {\n  return String(val).padStart(2, '0');\n};\n\nconst timer = () => {\n  const currentDate = new Date();\n  const deltaTime = selectedDate - currentDate;\n\n  if (deltaTime <= 0) {\n    inputDate.disabled = false;\n    clearInterval(timerId);\n    iziToast.success({\n      title: 'Finished',\n      message: 'Time counting is done!',\n    });\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(deltaTime);\n\n  daysSpan.textContent = addLeadingZero(days);\n  hoursSpan.textContent = addLeadingZero(hours);\n  minutesSpan.textContent = addLeadingZero(minutes);\n  secondsSpan.textContent = addLeadingZero(seconds);\n};\n\nconst onStartBtnClick = () => {\n  inputDate.disabled = true;\n  startBtn.disabled = true;\n  timerId = setInterval(timer, 1000);\n};\n\nstartBtn.addEventListener('click', onStartBtnClick);\n"],"names":["inputDate","startBtn","daysSpan","hoursSpan","minutesSpan","secondsSpan","selectedDate","timerId","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","val","timer","deltaTime","onStartBtnClick"],"mappings":"sGAKA,MAAMA,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAAe,KACfC,EAAU,KAEdN,EAAS,SAAW,GAEpB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAeG,EAAc,CAAC,EAC1BH,GAAgBA,EAAe,IAAI,KACrCL,EAAS,SAAW,IAEpBA,EAAS,SAAW,GACpBS,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACjB,CAAO,EAEJ,CACH,EAEAC,EAAU,mBAAoBH,CAAO,EAErC,SAASI,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,MAAMC,EAAiBC,GACd,OAAOA,CAAG,EAAE,SAAS,EAAG,GAAG,EAG9BC,EAAQ,IAAM,CAElB,MAAMC,EAAYf,EADE,IAAI,KAGxB,GAAIe,GAAa,EAAG,CAClBrB,EAAU,SAAW,GACrB,cAAcO,CAAO,EACrBG,EAAS,QAAQ,CACf,MAAO,WACP,QAAS,wBACf,CAAK,EACD,MACD,CAED,KAAM,CAAE,KAAAI,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUS,CAAS,EAE7DnB,EAAS,YAAcgB,EAAeJ,CAAI,EAC1CX,EAAU,YAAce,EAAeH,CAAK,EAC5CX,EAAY,YAAcc,EAAeF,CAAO,EAChDX,EAAY,YAAca,EAAeD,CAAO,CAClD,EAEMK,EAAkB,IAAM,CAC5BtB,EAAU,SAAW,GACrBC,EAAS,SAAW,GACpBM,EAAU,YAAYa,EAAO,GAAI,CACnC,EAEAnB,EAAS,iBAAiB,QAASqB,CAAe"}